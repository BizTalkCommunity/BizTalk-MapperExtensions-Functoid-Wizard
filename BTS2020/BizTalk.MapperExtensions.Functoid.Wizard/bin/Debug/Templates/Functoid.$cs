using Microsoft.BizTalk.BaseFunctoids; 
using System.Reflection;  
using System.Globalization;  
using System.Resources;
using System;
using System.Text;

namespace [!output NAMESPACE]
{
	public class [!output CLASSNAME] : BaseFunctoid
	{
		static string ResourceName = "[!output NAMESPACE].[!output CLASSNAME]Resources";
		static ResourceManager resmgr = new ResourceManager(ResourceName, Assembly.GetExecutingAssembly());

		public [!output CLASSNAME]():base()
		{
			int functoidID;
			// This has to be a number greater than 10000
			functoidID = System.Convert.ToInt32(resmgr.GetString("FunctoidId"));
			this.ID = functoidID; 

			// Resource assembly must be ProjectName.ResourceName if building with VS.Net
			SetupResourceAssembly(ResourceName, Assembly.GetExecutingAssembly());

			// Setup the Name, ToolTip, Help Description, and the Bitmap for this functoid
			SetName("FunctoidName");                  
			SetTooltip("FunctoidToolTip");
			SetDescription("FunctoidDescription");
			SetBitmap("FunctoidBitmap");

			// Set the limits for the number of input parameters.
			// Minimum and maximum parameters that the functoid accepts 
			this.SetMinParams([!output MINPARAMS]);
			this.SetMaxParams([!output MAXPARAMS]);

			// Category for this functoid. This functoid goes under the String Functoid Tab in the
			// VS.Net toolbox for functoids.
			this.Category = FunctoidCategory.[!output CATEGORY];

			// Add one line of code as set out below for each input param. For multiple input params, each line would be identical.
			AddInputConnectionType(ConnectionType.[!output INPUTCONNTYPE]); //first input

			// The functoid output can go to any node type.
			this.OutputConnectionType = ConnectionType.[!output OUTPUTCONNTYPE];


			// *** NOTE ***
			// You should use the SetExternalFunctionName method or the SetScriptBuffer method
			// To implement the expected behaviour of the Functoid

			// Set the function name that is to be called when invoking this functoid.
            // To test the map in Visual Studio, this functoid does not need to be in the GAC.
            // If using this functoid in a deployed BizTalk app. then it must be in the GAC
			// Change the "Execute" name by a proper Function name
			SetExternalFunctionName(GetType().Assembly.FullName,
				"[!output NAMESPACE].[!output CLASSNAME]", "[!output FUNCTIONNAME]");

			// Specifies the actual inline script that is offered by this functoid.
			// If you use SetScriptBuffer you don't need to add the functoid to GAC
			// This code will be add inline in the XSL generated by the map
			// SetScriptBuffer(ScriptType.CSharp, this.GetCSharpBuffer());
            // HasSideEffects = false;
		}

		//If you use SetScriptBuffer method you can delete this function
		public static [!output RETURNTYPE] [!output FUNCTIONNAME]([!output PARAMETERS])
		{
			ResourceManager resmgr = new ResourceManager(ResourceName, Assembly.GetExecutingAssembly());
			try
			{
				// TODO: Implement Functoid Logic
				return null;
			}
			catch (Exception e)
			{
				throw new Exception(resmgr.GetString("FunctoidException"), e);
			}
		}

		//If you use SetExternalFunctionName method you can delete this function
		private string GetCSharpBuffer()
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("public [!output RETURNTYPE] [!output FUNCTIONNAME]([!output PARAMETERS])\n");
            builder.Append("{\n");
			builder.Append("\t// TODO: Implement Functoid Logic");
            builder.Append("\treturn \"\";\n");
            builder.Append("}\n");
            return builder.ToString();
        }
	}
}